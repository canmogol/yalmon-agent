# 'stopBubbling' tells Lombok that this is the root directory and that it shouldnâ€™t
#       search parent directories for more configuration files
config.stopBubbling = true

# only by setting addLombokGeneratedAnnotation to true
#       Jacoco can detect, identify, and ignore Lombok-generated code,
#       because Lombok adds @lombok.Generated annotation to all generated methods.
lombok.addLombokGeneratedAnnotation = true

# If set to true, generated setters will 'chain' by default
#       (They will return 'this' instead of having a void return type).
lombok.accessors.chain = false

# If set to true, generated setters and getters will simply be named the same as
#       the field name, without a get or set prefix.
lombok.accessors.fluent = false

# The name of the generated log field (default: log).
lombok.log.fieldName = log

# Copy the Qualifier annotation from the instance variables to the constructor
# see https://github.com/rzwitserloot/lombok/issues/745
lombok.copyableAnnotations += org.springframework.beans.factory.annotation.Qualifier

# Allows you to forcibly stop or discourage use of a lombok feature. Legal values for
#       this key are warning or error. Some examples of values for (featureName) are:
#       "experimental" (flags use of any of the experimental features), "builder",
#       "sneakyThrows", or "extensionMethod".
# lombok.(featureName).flagUsage

# Some configuration keys take lists. For lists, use += to add an entry. You can remove
#       a single item from the list (useful to undo a parent configuration file's setting)
#       with -=. For example:
# lombok.accessors.prefix += m_

# Lombok can add the @SuppressFBWarnings annotation which is useful if you want to run
#       FindBugs on your class files. To enable this feature, make sure findbugs is on
#       the classpath when you compile, and add the following config key:
# lombok.extern.findbugs.addSuppressFBWarnings = true

# These config keys can make lombok affect source files even if they have 0 lombok
#       annotations in them. Turning either of these options on means lombok will make
#       every field in every source file final and/or private unless it has an explicit
#       access modifier or annotation to suppress this. See the @FieldDefaults annotation.
# lombok.fieldDefaults.defaultPrivate = true
# lombok.fieldDefaults.defaultFinal = true

# Lombok can add @javax.annotation.Generated annotations to all generated nodes where possible.
# We advise against this; JDK9 breaks this annotation, and it's unlikely to ever get fixed.
# NB: Until Lombok v1.16.20, this setting defaulted to true.
# lombok.addJavaxGeneratedAnnotation = false
